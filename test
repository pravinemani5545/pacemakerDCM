# DOOR MODE PARAMETERS
    def set_mode_DOOR(self):
        # set up DOOR frame inside of pm_params frame
        self.mode_name.config(text="DOOR")
        self.DOOR_mode = Frame(self.pmParams)

        # forget previous mode frame and set this as new one
        self.mode_frame.grid_forget()
        self.mode_frame = self.DOOR_mode
        self.mode_frame.grid(row=1, column=0, columnspan=2)

        # parameters for this mode to be modified
        lrl = StringVar(self.DOOR_mode)
        url = StringVar(self.DOOR_mode)
        va = StringVar(self.DOOR_mode)
        vpw = StringVar(self.DOOR_mode)
        aa = StringVar(self.DOOR_mode)
        apw = StringVar(self.DOOR_mode)
        av = StringVar(self.DOOR_mode)
        max = StringVar(self.DOOR_mode)
        threshold = StringVar(self.DOOR_mode)
        rxn = StringVar(self.DOOR_mode)
        response = StringVar(self.DOOR_mode)
        recovery = StringVar(self.DOOR_mode)

        Label(self.DOOR_mode, text="Lower Rate Limit (ppm): ").grid(row=1, column=0, padx=85, pady=2)
        enter_lrl = Entry(self.DOOR_mode, textvariable=lrl).grid(row=1, column=1)

        Label(self.DOOR_mode, text="Upper Rate Limit (ppm): ").grid(row=2, column=0, pady=2)
        enter_url = Entry(self.DOOR_mode, textvariable=url).grid(row=2, column=1)

        Label(self.DOOR_mode, text="Atrial Amplitude (V): ").grid(row=3, column=0, pady=2)
        enter_aa = Entry(self.DOOR_mode, textvariable=aa).grid(row=3, column=1)

        Label(self.DOOR_mode, text="Atrial Pulse Width (ms): ").grid(row=4, column=0, pady=2)
        enter_apw = Entry(self.DOOR_mode, textvariable=apw).grid(row=4, column=1)

        Label(self.DOOR_mode, text="Ventrical Amplitude (V): ").grid(row=5, column=0, pady=2, padx=50)
        enter_va = Entry(self.DOOR_mode, textvariable=va).grid(row=5, column=1)

        Label(self.DOOR_mode, text="Ventrical Pulse Width (ms): ").grid(row=6, column=0, pady=2, padx=50)
        enter_vpw = Entry(self.DOOR_mode, textvariable=vpw).grid(row=6, column=1)

        thresh_vals = ("V-Low", "Low", "Med-Low", "Med", "Med-High", "High", "V-High")
        Label(self.DOOR_mode, text="Activity Threshold : ").grid(row=1, column=2, padx=85, pady=2)
        enter_threshold = Spinbox(self.DOOR_mode, values=thresh_vals, state="readonly", textvariable=threshold).grid(row=1, column=3)

        Label(self.DOOR_mode, text="Fixed AV Delay(ms): ").grid(row=2, column=2, pady=2, padx=50)
        enter_av = Entry(self.DOOR_mode, textvariable=av).grid(row=2, column=3)

        Label(self.DOOR_mode, text="Reaction Time (ms): ").grid(row=3, column=2, padx=85, pady=2)
        enter_rxn = Entry(self.DOOR_mode, textvariable=rxn).grid(row=3, column=3)

        Label(self.DOOR_mode, text="Max Sensor Rate (ppm): ").grid(row=4, column=2, pady=2)
        enter_max = Entry(self.DOOR_mode, textvariable=max).grid(row=4, column=3)

        Label(self.DOOR_mode, text="Response Factor : ").grid(row=5, column=2, padx=85, pady=2)
        enter_response = Entry(self.DOOR_mode, textvariable=response).grid(row=5, column=3)

        Label(self.DOOR_mode, text="Recovery Time (mins) : ").grid(row=6, column=2, padx=85, pady=2)
        enter_recovery = Entry(self.DOOR_mode, textvariable=recovery).grid(row=6, column=3)

        Button(self.DOOR_mode, text="Update", padx=20, pady=10,
               command=lambda: self.send_DOOR(lrl, url, va, vpw, aa, apw, av, rxn, max, threshold, response, recovery)).grid(row=7, column=3, pady=20)

    # DOOR PARAMETERS
    def send_DOOR(self, lrl, url, va, vpw, aa, apw, av, rxn, threshold, max, response, recovery):
        mode = DOOR(self.userName)
        errormsg = ""
        error = True

        # initialize message label
        self.message.destroy()
        self.message = Label(self.DOOR_mode)
        self.message.grid()

        # make sure values entered are valid
        try:
            error, errormsg = check_LRL(int(lrl.get()))
            if error == False:
                error, errormsg = check_URL(int(url.get()))
                if error == False:
                    error, errormsg = check_VA(float(va.get()))
                    if error == False:
                        error, errormsg = check_VPW(int(vpw.get()))
                        if error == False:
                            error, errormsg = check_AA(float(aa.get()))
                            if error == False:
                                error, errormsg = check_APW(int(apw.get()))
                                if error == False:
                                    error, errormsg = check_AV_DELAY(int(av.get()))
                                    if error == False:
                                        error, errormsg = check_RXN_TIME(int(rxn.get()))
                                        if error == False:
                                            error, errormsg = check_MAX_SENSE_RATE(int(max.get()))
                                            if error == False:
                                                error, errormsg = check_RESPONSE(int(response.get()))
                                                if error == False:
                                                    error, errormsg = check_RECOVERY(int(recovery.get()))

            if error == False:
                mode.set_LRL(int(lrl.get()))
                mode.set_URL(int(url.get()))
                mode.set_VA(float(va.get()))
                mode.set_VPW(int(vpw.get()))
                mode.set_AA(float(aa.get()))
                mode.set_APW(int(apw.get()))
                mode.set_FIXED_AV_DELAY(int(av.get()))
                mode.set_MAX_SENSE_RATE(int(max.get()))
                mode.set_ACT_THRESHOLD(threshold.get())
                mode.set_REACTION_TIME (int(rxn.get()))
                mode.set_RESPONSE_FACTOR(int(response.get()))
                mode.set_RECOVERY_TIME(int(recovery.get()))
                mode.write_params()

                self.message.destroy()
                self.message = Label(self.DOOR_mode, text="Update Success!", font=("Calibri", 25), fg="green")
                self.message.grid(row=7, columnspan=4, pady=15)
            else:
                self.message.destroy()
                self.message = Label(self.DOOR_mode, text=f"Update Failed: \n {errormsg}", font=("Calibri", 15), fg="red")
                self.message.grid(row=7, columnspan=4, pady=15)

        except Exception as e:
            print(f"EXCEPTION: {e}")
            self.message.destroy()
            self.message = Label(self.DOOR_mode,
                                 text="Update Failed: \nPlease use floats for ventricular/atrial amplitude\n"
                                      "Please use integers for all other values", font=("Calibri", 15), fg="red")
            self.message.grid(row=7, columnspan=4, pady=15)